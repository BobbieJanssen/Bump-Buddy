spring.application.name=Bump-Buddy
server.port=8080

#database en adres
spring.sql.init.platform=postgres 
spring.datasource.url=jdbc:postgresql://localhost:5433/springboot 

#inlog
spring.datasource.username=postgres 
spring.datasource.password=password

#database
spring.datasource.driver-class-name=org.postgresql.Driver 
spring.jpa.database=postgresql
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect 
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect 

#Hibernate tabellen laten aanmaken en in de console laten zien welke database calls worden uitgevoerd en dat de data.sql ingeladen wordt
spring.jpa.generate-ddl=true 
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true 
spring.sql.init.mode=always 
spring.jpa.defer-datasource-initialization=true 

#Data.sql
#
#Het is tijdens development handig om je database te vullen met test-data. Wanneer je bijvoorbeeld een GET-request wilt
# testen in postman, wil je niet eerst een POST-request hoeven doen. Je wilt meteen een GET-request kunnen doen die meteen data moet terug kunnen geven.
#
#
#
#Gelukkig heeft Spring daar een heel makkelijk systeem voor, de data.sql. Dit bestand kun je aanmaken in de src/resources map.
# Je kunt daar simpelweg een nieuw file aanmaken en deze ?data.sql? noemen.
#
#
#
#Let op: wanneer we het bestand "data.sql? hebben aangemaakt en in de application.properties hebben aangegeven dat we dit
# willen gebruiken, dan mag het bestand niet leeg zijn. We moeten er dan SQL in zetten, want anders start de applicatie niet meer op!
#
#
#
#Om gebruik te maken van data.sql moeten we wel zorgen dat we dit in de application.properties correct hebben ingesteld.
#
#Vervolgens kunnen we in de data.sql IINSERT-statements (en andere SQL) zetten om onze database te vullen. Bijvoorbeeld:
#
#
#
#INSERT INTO books (id, isbn, title, genre) VALUES (1, ?1232143143?, ?Novi?, ?educatief?),(2,?563455423412?,?Koken met bananen?,?kookboeken?);
#Vorige